-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS gossip."Posts"
(
    "Post_ID" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "User_ID" character varying(255) COLLATE pg_catalog."default" NOT NULL,
    "Title" character varying(200) COLLATE pg_catalog."default" NOT NULL,
    "Body" character varying(1000) COLLATE pg_catalog."default",
    "Date_Posted" date NOT NULL,
    CONSTRAINT PK_Posts PRIMARY KEY ("Post_ID")
);

CREATE TABLE IF NOT EXISTS gossip."Users"
(
    "User_ID" character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT PK_Users PRIMARY KEY ("User_ID")
);

CREATE TABLE IF NOT EXISTS gossip."Votes"
(
    "Vote_ID" integer GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "User_ID" character varying(255) NOT NULL,
    "Post_ID" integer NOT NULL,
    "Up_Or_Down" boolean,
    CONSTRAINT PK_Votes PRIMARY KEY ("Vote_ID")
);

CREATE TABLE IF NOT EXISTS gossip."Comments"
(
    "Comment_ID" integer GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "User_ID" character varying(255) NOT NULL,
    "Post_ID" integer NOT NULL,
    "Parent_Comment_ID" integer,
    "Date_Posted" date NOT NULL,
    "Body" text NOT NULL,
    CONSTRAINT PK_Comments PRIMARY KEY ("Comment_ID")
);

CREATE TABLE IF NOT EXISTS gossip."Tags"
(
    "Tag_ID" integer GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "Name" character varying(255) NOT NULL,
    CONSTRAINT PK_Tags PRIMARY KEY ("Tag_ID")
);

CREATE TABLE IF NOT EXISTS gossip."PostsTags"
(
    "Post_ID" integer NOT NULL,
	"Tag_ID" integer NOT NULL,
	CONSTRAINT PK_PostsTags PRIMARY KEY
    (
        "Post_ID",
        "Tag_ID"
    )
);

ALTER TABLE IF EXISTS gossip."Posts"
    ADD CONSTRAINT "Users_To_Posts" FOREIGN KEY ("User_ID")
    REFERENCES gossip."Users" ("User_ID") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS gossip."Votes"
    ADD CONSTRAINT "Users_To_Votes" FOREIGN KEY ("User_ID")
    REFERENCES gossip."Users" ("User_ID") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS gossip."Votes"
    ADD CONSTRAINT "Posts_To_Votes" FOREIGN KEY ("Post_ID")
    REFERENCES gossip."Posts" ("Post_ID") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS gossip."Comments"
    ADD CONSTRAINT "Users_To_Comments" FOREIGN KEY ("User_ID")
    REFERENCES gossip."Users" ("User_ID") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS gossip."Comments"
    ADD CONSTRAINT "Posts_To_Comments" FOREIGN KEY ("Post_ID")
    REFERENCES gossip."Posts" ("Post_ID") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS gossip."PostsTags"
    ADD CONSTRAINT "Posts_To_PostsTags" FOREIGN KEY ("Post_ID")
    REFERENCES gossip."Posts" ("Post_ID") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS gossip."PostsTags"
    ADD CONSTRAINT "Tags_To_PostsTags" FOREIGN KEY ("Tag_ID")
    REFERENCES gossip."Tags" ("Tag_ID") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


END;